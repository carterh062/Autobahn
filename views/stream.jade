extends layout

block content
	div.row(id="content")
		video#streamVideo
	script(src='https://code.jquery.com/jquery-2.1.3.min.js')
	script(src='https://cdn.socket.io/socket.io-1.3.4.js')
	script.
		function main(){
			var video = document.querySelector('video');
			window.URL = window.URL || window.webkitURL;
			window.MediaSource = window.MediaSource || window.WebKitMediaSource;

			if(typeof window.MediaSource == "undefined" || window.MediaSource === null)
			{
				alert('MediaSource API is not available!');
				return;
			}

			var mediaSource = new MediaSource();    
			var video = document.getElementById('streamVideo');
			video.style="display:block";
			video.src = window.URL.createObjectURL(mediaSource);

			var type;
			for (var i=0; i<window.location.search.substring(1).split("&").length; i++) {
				var queryStr = window.location.search;
				if (queryStr.substring(1).split("&")[i].split("=")[0] == "t") {
					var type = queryStr.substring(1).split("&")[i].split("=")[1];
					break;
				}
			}

			mediaSource.addEventListener('sourceopen', function(e)
			{
				var codec;
				if (type == "m") {
					codec = 'video/mp4; codecs="avc1.64000d,mp4a.40.2"';
				} else {
					codec = 'video/webm; codecs="vorbis,vp8"';
				}
				
				var sourceBuffer = mediaSource.addSourceBuffer(codec);
				sourceBuffer.mode = 'sequence';
				var socket = io.connect('http://ssjc-app.herokuapp.com');
				if(socket) console.log('Socket.io Working');
				socket.emit("init", "go")
				socket.on('clientStream', function (data) 
				{
					// store the buffers until you're ready for them
					// whatever normally would have called appendBuffer(buffer) can 
					// now just call queue.push(buffer) instead
						sourceBuffer.appendBuffer(new Uint8Array(data));
						console.log('appended');
							video.play();
						
					
				});
				sourceBuffer.addEventListener('updateend',function(){
					if(video.paused){
						video.play();
					}
				});
			});
		}
		main();
			

